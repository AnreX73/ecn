# Generated by Django 4.1.4 on 2023-01-13 11:30

import ckeditor.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    replaces = [('ecn', '0001_initial'), ('ecn', '0002_user_phone_number'), ('ecn', '0003_balcony_bathroomtype_elevatortype_flatstate_and_more'), ('ecn', '0004_alter_roomamount_room_amount_alter_roomamount_slug'), ('ecn', '0005_developer_alter_secondaryobject_options_and_more'), ('ecn', '0006_newbuilding')]

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('phone_number', models.CharField(blank=True, max_length=12, verbose_name='телефон для связи')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Balcony',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Балкон')),
            ],
            options={
                'verbose_name': 'Балкон',
                'verbose_name_plural': 'Балкон',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='BathroomType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Тип санузла')),
            ],
            options={
                'verbose_name': 'Тип санузла',
                'verbose_name_plural': 'Тип санузла',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ElevatorType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Тип лифта')),
            ],
            options={
                'verbose_name': 'Тип лифта',
                'verbose_name_plural': 'Тип лифта',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='FlatState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Состояние')),
            ],
            options={
                'verbose_name': 'Состояние',
                'verbose_name_plural': 'Состояние',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='InCityObjectType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Тип объекта')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='URL')),
                ('icon', models.ImageField(blank=True, upload_to='images', verbose_name='иконка(картинка) для типа объекта')),
                ('in_main_page', models.BooleanField(default=True, verbose_name='в меню на главной странице')),
            ],
            options={
                'verbose_name': 'Тип объекта',
                'verbose_name_plural': 'Тип объекта',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='InCityRegion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Район города')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='URL')),
            ],
            options={
                'verbose_name': 'Район города',
                'verbose_name_plural': 'Район города',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='MetroStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Станция метро')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='URL')),
            ],
            options={
                'verbose_name': 'Станцию метро',
                'verbose_name_plural': 'Станция метро',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ObjectConstruction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='тип стройматериалов')),
            ],
            options={
                'verbose_name': 'тип стройматериалов',
                'verbose_name_plural': 'тип стройматериалов',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='RoomAmount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_amount', models.PositiveIntegerField(unique=True, verbose_name='Кол-во комнат цифрами')),
                ('title', models.CharField(max_length=25, verbose_name='Количество комнат словами')),
                ('slug', models.SlugField(max_length=150, verbose_name='URL')),
            ],
            options={
                'verbose_name': 'Количество комнат',
                'verbose_name_plural': 'Количество комнат',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Developer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, verbose_name='название застройщика')),
                ('slug', models.SlugField(max_length=150, unique=True, verbose_name='URL')),
                ('logo', models.ImageField(blank=True, upload_to='images', verbose_name='логотип(картинка) если есть')),
            ],
            options={
                'verbose_name': 'Застройщик',
                'verbose_name_plural': 'Застройщики',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SecondaryObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('slug', models.SlugField(max_length=150, unique=True, verbose_name='URL')),
                ('price', models.CharField(max_length=255, verbose_name='Цена')),
                ('image', models.ImageField(blank=True, upload_to='images', verbose_name='Основное изображение')),
                ('is_hot', models.BooleanField(default=False, help_text='выделить объект', verbose_name='горячий вариант')),
                ('object_adress', models.CharField(blank=True, help_text='необязательно', max_length=255, verbose_name='адрес объекта')),
                ('content', ckeditor.fields.RichTextField(blank=True, verbose_name='текстовое описание ')),
                ('time_create', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('time_update', models.DateTimeField(auto_now=True, verbose_name='Время изменения')),
                ('is_published', models.BooleanField(default=True, verbose_name='Публикация')),
                ('sale_or_rent', models.CharField(choices=[('s', 'Продажа'), ('r', 'Аренда')], default='s', max_length=25, verbose_name='Продажа или аренда')),
                ('metro_distance', models.CharField(blank=True, max_length=255, verbose_name='расстояние до метро')),
                ('square', models.PositiveIntegerField(blank=True, verbose_name='общая площадь кв.м')),
                ('live_square', models.PositiveIntegerField(blank=True, verbose_name='жилая площадь')),
                ('kitchen', models.PositiveIntegerField(blank=True, verbose_name='площадь кухни')),
                ('rooms_layout', models.CharField(blank=True, max_length=255, verbose_name='планировка')),
                ('floor', models.PositiveIntegerField(blank=True, default=1, verbose_name='Этаж')),
                ('all_floor', models.PositiveIntegerField(blank=True, null=True, verbose_name='Этажность дома')),
                ('year', models.CharField(blank=True, max_length=25, verbose_name='Год постройки ')),
                ('balcony', models.ForeignKey(default=2, on_delete=django.db.models.deletion.PROTECT, to='ecn.balcony', verbose_name='балкон')),
                ('bathroom', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecn.bathroomtype', verbose_name='санузел')),
                ('city_region', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='region', to='ecn.incityregion', verbose_name='район города')),
                ('construction', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecn.objectconstruction', verbose_name='тип постройки')),
                ('elevator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecn.elevatortype', verbose_name='лифт')),
                ('estate_agent', models.ForeignKey(help_text='специалист по объекту', on_delete=django.db.models.deletion.CASCADE, related_name='realtor', to=settings.AUTH_USER_MODEL, verbose_name='агент по недвижимости')),
                ('metro', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='metro', to='ecn.metrostation', verbose_name='станция метро')),
                ('object_type', models.ForeignKey(help_text='выберете тип объекта', on_delete=django.db.models.deletion.PROTECT, related_name='obj_type', to='ecn.incityobjecttype', verbose_name='тип объекта')),
                ('rooms', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='rooms', to='ecn.roomamount', verbose_name='количество комнат')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecn.flatstate', verbose_name='состояние')),
            ],
            options={
                'verbose_name': 'Вторичное жилье',
                'verbose_name_plural': 'Вторичное жилье',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ResidentialComplex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150, verbose_name='название жилого комплекса')),
                ('slug', models.SlugField(max_length=180, unique=True, verbose_name='URL')),
                ('logo', models.ImageField(blank=True, upload_to='images', verbose_name='логотип(картинка) если есть')),
                ('developer_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='developer_name', to='ecn.developer', verbose_name='название застройщика')),
            ],
            options={
                'verbose_name': 'Жилой комплекс',
                'verbose_name_plural': 'ЖК',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='NewBuilding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('slug', models.SlugField(max_length=150, unique=True, verbose_name='URL')),
                ('price', models.CharField(max_length=255, verbose_name='Цена')),
                ('image', models.ImageField(blank=True, upload_to='images', verbose_name='Основное изображение')),
                ('is_hot', models.BooleanField(default=False, help_text='выделить объект', verbose_name='горячий вариант')),
                ('object_adress', models.CharField(blank=True, help_text='необязательно', max_length=255, verbose_name='адрес объекта')),
                ('content', ckeditor.fields.RichTextField(blank=True, verbose_name='текстовое описание ')),
                ('time_create', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('time_update', models.DateTimeField(auto_now=True, verbose_name='Время изменения')),
                ('is_published', models.BooleanField(default=True, verbose_name='Публикация')),
                ('metro_distance', models.CharField(blank=True, max_length=255, verbose_name='расстояние до метро')),
                ('square', models.PositiveIntegerField(blank=True, verbose_name='общая площадь кв.м')),
                ('live_square', models.PositiveIntegerField(blank=True, verbose_name='жилая площадь')),
                ('kitchen', models.PositiveIntegerField(blank=True, verbose_name='площадь кухни')),
                ('floor', models.PositiveIntegerField(blank=True, default=1, verbose_name='Этаж')),
                ('all_floor', models.PositiveIntegerField(blank=True, null=True, verbose_name='Этажность дома')),
                ('year', models.CharField(blank=True, max_length=25, verbose_name='квартал и год сдачи ')),
                ('balcony', models.ForeignKey(default=2, on_delete=django.db.models.deletion.PROTECT, to='ecn.balcony', verbose_name='балкон')),
                ('bathroom', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecn.bathroomtype', verbose_name='санузел')),
                ('city_region', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='city_region', to='ecn.incityregion', verbose_name='район города')),
                ('complex_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='complex_name', to='ecn.residentialcomplex', verbose_name='название ЖК')),
                ('construction', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecn.objectconstruction', verbose_name='тип постройки')),
                ('developer_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecn.developer', verbose_name='название застройщика')),
                ('elevator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecn.elevatortype', verbose_name='лифт')),
                ('estate_agent', models.ForeignKey(help_text='специалист по объекту', on_delete=django.db.models.deletion.CASCADE, related_name='estate_agent', to=settings.AUTH_USER_MODEL, verbose_name='агент по недвижимости')),
                ('metro', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='metro_station', to='ecn.metrostation', verbose_name='станция метро')),
                ('rooms', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='rooms_count', to='ecn.roomamount', verbose_name='количество комнат')),
            ],
            options={
                'verbose_name': 'Новостройка',
                'verbose_name_plural': 'Новостройки',
                'ordering': ['id'],
            },
        ),
    ]
